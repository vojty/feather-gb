use emulator::Hardware;

use crate::emulator;
use crate::traits::DisplayHex;

use super::{
    cpu::{
        Cpu,
        Reg16::{AF, BC, DE, HL, SP},
        Reg8::{A, B, C, D, E, H, L},
    },
    instructions::{Addr, ImmediateU16, ImmediateU8, JumpConditions},
};

impl Cpu {
    pub fn execute(&mut self, op_code: u8, hw: &mut Hardware) -> String {
        match op_code {
            0x00 => "NOP".to_string(),
            0x01 => self.load16(hw, BC, ImmediateU16),
            0x02 => self.load8(hw, Addr::BC, A),
            0x03 => self.inc16(hw, BC),
            0x04 => self.inc(hw, B),
            0x05 => self.dec(hw, B),
            0x06 => self.load8(hw, B, ImmediateU8),
            0x07 => self.rlca(),
            0x08 => self.load16(hw, ImmediateU16, SP),
            0x09 => self.add16(hw, BC),
            0x0A => self.load8(hw, A, Addr::BC),
            0x0B => self.dec16(hw, BC),
            0x0C => self.inc(hw, C),
            0x0D => self.dec(hw, C),
            0x0E => self.load8(hw, C, ImmediateU8),
            0x0F => self.rrca(),

            0x10 => "STOP".to_string(),
            0x11 => self.load16(hw, DE, ImmediateU16),
            0x12 => self.load8(hw, Addr::DE, A),
            0x13 => self.inc16(hw, DE),
            0x14 => self.inc(hw, D),
            0x15 => self.dec(hw, D),
            0x16 => self.load8(hw, D, ImmediateU8),
            0x17 => self.rla(),
            0x18 => self.jr_cc(hw, JumpConditions::NONE),
            0x19 => self.add16(hw, DE),
            0x1A => self.load8(hw, A, Addr::DE),
            0x1B => self.dec16(hw, DE),
            0x1C => self.inc(hw, E),
            0x1D => self.dec(hw, E),
            0x1E => self.load8(hw, E, ImmediateU8),
            0x1F => self.rra(),

            0x20 => self.jr_cc(hw, JumpConditions::NZ),
            0x21 => self.load16(hw, HL, ImmediateU16),
            0x22 => self.load8(hw, Addr::HLI, A),
            0x23 => self.inc16(hw, HL),
            0x24 => self.inc(hw, H),
            0x25 => self.dec(hw, H),
            0x26 => self.load8(hw, H, ImmediateU8),
            0x27 => self.daa(),
            0x28 => self.jr_cc(hw, JumpConditions::Z),
            0x29 => self.add16(hw, HL),
            0x2A => self.load8(hw, A, Addr::HLI),
            0x2B => self.dec16(hw, HL),
            0x2C => self.inc(hw, L),
            0x2D => self.dec(hw, L),
            0x2E => self.load8(hw, L, ImmediateU8),
            0x2F => self.cpl(),

            0x30 => self.jr_cc(hw, JumpConditions::NC),
            0x31 => self.load16(hw, SP, ImmediateU16),
            0x32 => self.load8(hw, Addr::HLD, A),
            0x33 => self.inc16(hw, SP),
            0x34 => self.inc(hw, Addr::HL),
            0x35 => self.dec(hw, Addr::HL),
            0x36 => self.load8(hw, Addr::HL, ImmediateU8),
            0x37 => self.scf(),
            0x38 => self.jr_cc(hw, JumpConditions::C),
            0x39 => self.add16(hw, SP),
            0x3A => self.load8(hw, A, Addr::HLD),
            0x3B => self.dec16(hw, SP),
            0x3C => self.inc(hw, A),
            0x3D => self.dec(hw, A),
            0x3E => self.load8(hw, A, ImmediateU8),
            0x3F => self.ccf(),

            0x40 => {
                // Magic breakpoint
                hw.events.push(0xff);
                self.load8(hw, B, B)
            }
            0x41 => self.load8(hw, B, C),
            0x42 => self.load8(hw, B, D),
            0x43 => self.load8(hw, B, E),
            0x44 => self.load8(hw, B, H),
            0x45 => self.load8(hw, B, L),
            0x46 => self.load8(hw, B, Addr::HL),
            0x47 => self.load8(hw, B, A),
            0x48 => self.load8(hw, C, B),
            0x49 => self.load8(hw, C, C),
            0x4A => self.load8(hw, C, D),
            0x4B => self.load8(hw, C, E),
            0x4C => self.load8(hw, C, H),
            0x4D => self.load8(hw, C, L),
            0x4E => self.load8(hw, C, Addr::HL),
            0x4F => self.load8(hw, C, A),

            0x50 => self.load8(hw, D, B),
            0x51 => self.load8(hw, D, C),
            0x52 => self.load8(hw, D, D),
            0x53 => self.load8(hw, D, E),
            0x54 => self.load8(hw, D, H),
            0x55 => self.load8(hw, D, L),
            0x56 => self.load8(hw, D, Addr::HL),
            0x57 => self.load8(hw, D, A),
            0x58 => self.load8(hw, E, B),
            0x59 => self.load8(hw, E, C),
            0x5A => self.load8(hw, E, D),
            0x5B => self.load8(hw, E, E),
            0x5C => self.load8(hw, E, H),
            0x5D => self.load8(hw, E, L),
            0x5E => self.load8(hw, E, Addr::HL),
            0x5F => self.load8(hw, E, A),

            0x60 => self.load8(hw, H, B),
            0x61 => self.load8(hw, H, C),
            0x62 => self.load8(hw, H, D),
            0x63 => self.load8(hw, H, E),
            0x64 => self.load8(hw, H, H),
            0x65 => self.load8(hw, H, L),
            0x66 => self.load8(hw, H, Addr::HL),
            0x67 => self.load8(hw, H, A),
            0x68 => self.load8(hw, L, B),
            0x69 => self.load8(hw, L, C),
            0x6A => self.load8(hw, L, D),
            0x6B => self.load8(hw, L, E),
            0x6C => self.load8(hw, L, H),
            0x6D => self.load8(hw, L, L),
            0x6E => self.load8(hw, L, Addr::HL),
            0x6F => self.load8(hw, L, A),

            0x70 => self.load8(hw, Addr::HL, B),
            0x71 => self.load8(hw, Addr::HL, C),
            0x72 => self.load8(hw, Addr::HL, D),
            0x73 => self.load8(hw, Addr::HL, E),
            0x74 => self.load8(hw, Addr::HL, H),
            0x75 => self.load8(hw, Addr::HL, L),
            0x76 => self.halt(hw),
            0x77 => self.load8(hw, Addr::HL, A),
            0x78 => self.load8(hw, A, B),
            0x79 => self.load8(hw, A, C),
            0x7A => self.load8(hw, A, D),
            0x7B => self.load8(hw, A, E),
            0x7C => self.load8(hw, A, H),
            0x7D => self.load8(hw, A, L),
            0x7E => self.load8(hw, A, Addr::HL),
            0x7F => self.load8(hw, A, A),

            0x80 => self.add(hw, B),
            0x81 => self.add(hw, C),
            0x82 => self.add(hw, D),
            0x83 => self.add(hw, E),
            0x84 => self.add(hw, H),
            0x85 => self.add(hw, L),
            0x86 => self.add(hw, Addr::HL),
            0x87 => self.add(hw, A),
            0x88 => self.adc(hw, B),
            0x89 => self.adc(hw, C),
            0x8A => self.adc(hw, D),
            0x8B => self.adc(hw, E),
            0x8C => self.adc(hw, H),
            0x8D => self.adc(hw, L),
            0x8E => self.adc(hw, Addr::HL),
            0x8F => self.adc(hw, A),

            0x90 => self.sub(hw, B),
            0x91 => self.sub(hw, C),
            0x92 => self.sub(hw, D),
            0x93 => self.sub(hw, E),
            0x94 => self.sub(hw, H),
            0x95 => self.sub(hw, L),
            0x96 => self.sub(hw, Addr::HL),
            0x97 => self.sub(hw, A),
            0x98 => self.sbc(hw, B),
            0x99 => self.sbc(hw, C),
            0x9A => self.sbc(hw, D),
            0x9B => self.sbc(hw, E),
            0x9C => self.sbc(hw, H),
            0x9D => self.sbc(hw, L),
            0x9E => self.sbc(hw, Addr::HL),
            0x9F => self.sbc(hw, A),

            0xA0 => self.and(hw, B),
            0xA1 => self.and(hw, C),
            0xA2 => self.and(hw, D),
            0xA3 => self.and(hw, E),
            0xA4 => self.and(hw, H),
            0xA5 => self.and(hw, L),
            0xA6 => self.and(hw, Addr::HL),
            0xA7 => self.and(hw, A),
            0xA8 => self.xor(hw, B),
            0xA9 => self.xor(hw, C),
            0xAA => self.xor(hw, D),
            0xAB => self.xor(hw, E),
            0xAC => self.xor(hw, H),
            0xAD => self.xor(hw, L),
            0xAE => self.xor(hw, Addr::HL),
            0xAF => self.xor(hw, A),

            0xB0 => self.or(hw, B),
            0xB1 => self.or(hw, C),
            0xB2 => self.or(hw, D),
            0xB3 => self.or(hw, E),
            0xB4 => self.or(hw, H),
            0xB5 => self.or(hw, L),
            0xB6 => self.or(hw, Addr::HL),
            0xB7 => self.or(hw, A),
            0xB8 => self.cp(hw, B),
            0xB9 => self.cp(hw, C),
            0xBA => self.cp(hw, D),
            0xBB => self.cp(hw, E),
            0xBC => self.cp(hw, H),
            0xBD => self.cp(hw, L),
            0xBE => self.cp(hw, Addr::HL),
            0xBF => self.cp(hw, A),

            0xC0 => self.ret_cc(hw, JumpConditions::NZ),
            0xC1 => self.pop(hw, BC),
            0xC2 => self.jp_cc_imm_u16(hw, JumpConditions::NZ),
            0xC3 => self.jp_cc_imm_u16(hw, JumpConditions::NONE),
            0xC4 => self.call_cc(hw, JumpConditions::NZ),
            0xC5 => self.push(hw, BC),
            0xC6 => self.add(hw, ImmediateU8),
            0xC7 => self.rst(hw, 0x00),
            0xC8 => self.ret_cc(hw, JumpConditions::Z),
            0xC9 => self.ret(hw),
            0xCA => self.jp_cc_imm_u16(hw, JumpConditions::Z),
            0xCB => {
                let op_code = self.read_imm_u8_tick(hw);
                self.execute_cb(op_code, hw)
            }
            0xCC => self.call_cc(hw, JumpConditions::Z),
            0xCD => self.call_cc(hw, JumpConditions::NONE),
            0xCE => self.adc(hw, ImmediateU8),
            0xCF => self.rst(hw, 0x08),

            0xD0 => self.ret_cc(hw, JumpConditions::NC),
            0xD1 => self.pop(hw, DE),
            0xD2 => self.jp_cc_imm_u16(hw, JumpConditions::NC),
            0xD3 => self.invalid_opcode(op_code),
            0xD4 => self.call_cc(hw, JumpConditions::NC),
            0xD5 => self.push(hw, DE),
            0xD6 => self.sub(hw, ImmediateU8),
            0xD7 => self.rst(hw, 0x10),
            0xD8 => self.ret_cc(hw, JumpConditions::C),
            0xD9 => self.reti(hw),
            0xDA => self.jp_cc_imm_u16(hw, JumpConditions::C),
            0xDB => self.invalid_opcode(op_code),
            0xDC => self.call_cc(hw, JumpConditions::C),
            0xDD => self.invalid_opcode(op_code),
            0xDE => self.sbc(hw, ImmediateU8),
            0xDF => self.rst(hw, 0x18),

            0xE0 => self.load8(hw, Addr::HighU8, A),
            0xE1 => self.pop(hw, HL),
            0xE2 => self.load8(hw, Addr::HighC, A),
            0xE3 => self.invalid_opcode(op_code),
            0xE4 => self.invalid_opcode(op_code),
            0xE5 => self.push(hw, HL),
            0xE6 => self.and(hw, ImmediateU8),
            0xE7 => self.rst(hw, 0x20),
            0xE8 => self.add_sp_i8(hw),
            0xE9 => self.jp_hl_address(),
            0xEA => self.load8(hw, Addr::U16, A),
            0xEB => self.invalid_opcode(op_code),
            0xEC => self.invalid_opcode(op_code),
            0xED => self.invalid_opcode(op_code),
            0xEE => self.xor(hw, ImmediateU8),
            0xEF => self.rst(hw, 0x28),

            0xF0 => self.load8(hw, A, Addr::HighU8),
            0xF1 => self.pop(hw, AF),
            0xF2 => self.load8(hw, A, Addr::HighC),
            0xF3 => self.di(),
            0xF4 => self.invalid_opcode(op_code),
            0xF5 => self.push(hw, AF),
            0xF6 => self.or(hw, ImmediateU8),
            0xF7 => self.rst(hw, 0x30),
            0xF8 => self.ld_hl_sp_i8(hw),
            0xF9 => {
                self.load16(hw, SP, HL);
                self.tick(hw); // internal

                "LD SP,HL".to_string()
            }
            0xFA => self.load8(hw, A, Addr::U16),
            0xFB => self.ei(),
            0xFC => self.invalid_opcode(op_code),
            0xFD => self.invalid_opcode(op_code),
            0xFE => self.cp(hw, ImmediateU8),
            0xFF => self.rst(hw, 0x38),
        }
    }

    pub fn execute_cb(&mut self, op_code: u8, hw: &mut Hardware) -> String {
        match op_code {
            0x00 => self.rlc(hw, B),
            0x01 => self.rlc(hw, C),
            0x02 => self.rlc(hw, D),
            0x03 => self.rlc(hw, E),
            0x04 => self.rlc(hw, H),
            0x05 => self.rlc(hw, L),
            0x06 => self.rlc(hw, Addr::HL),
            0x07 => self.rlc(hw, A),
            0x08 => self.rrc(hw, B),
            0x09 => self.rrc(hw, C),
            0x0a => self.rrc(hw, D),
            0x0b => self.rrc(hw, E),
            0x0c => self.rrc(hw, H),
            0x0d => self.rrc(hw, L),
            0x0e => self.rrc(hw, Addr::HL),
            0x0f => self.rrc(hw, A),

            0x10 => self.rl(hw, B),
            0x11 => self.rl(hw, C),
            0x12 => self.rl(hw, D),
            0x13 => self.rl(hw, E),
            0x14 => self.rl(hw, H),
            0x15 => self.rl(hw, L),
            0x16 => self.rl(hw, Addr::HL),
            0x17 => self.rl(hw, A),
            0x18 => self.rr(hw, B),
            0x19 => self.rr(hw, C),
            0x1a => self.rr(hw, D),
            0x1b => self.rr(hw, E),
            0x1c => self.rr(hw, H),
            0x1d => self.rr(hw, L),
            0x1e => self.rr(hw, Addr::HL),
            0x1f => self.rr(hw, A),

            0x20 => self.sla(hw, B),
            0x21 => self.sla(hw, C),
            0x22 => self.sla(hw, D),
            0x23 => self.sla(hw, E),
            0x24 => self.sla(hw, H),
            0x25 => self.sla(hw, L),
            0x26 => self.sla(hw, Addr::HL),
            0x27 => self.sla(hw, A),
            0x28 => self.sra(hw, B),
            0x29 => self.sra(hw, C),
            0x2a => self.sra(hw, D),
            0x2b => self.sra(hw, E),
            0x2c => self.sra(hw, H),
            0x2d => self.sra(hw, L),
            0x2e => self.sra(hw, Addr::HL),
            0x2f => self.sra(hw, A),

            0x30 => self.swap(hw, B),
            0x31 => self.swap(hw, C),
            0x32 => self.swap(hw, D),
            0x33 => self.swap(hw, E),
            0x34 => self.swap(hw, H),
            0x35 => self.swap(hw, L),
            0x36 => self.swap(hw, Addr::HL),
            0x37 => self.swap(hw, A),
            0x38 => self.srl(hw, B),
            0x39 => self.srl(hw, C),
            0x3a => self.srl(hw, D),
            0x3b => self.srl(hw, E),
            0x3c => self.srl(hw, H),
            0x3d => self.srl(hw, L),
            0x3e => self.srl(hw, Addr::HL),
            0x3f => self.srl(hw, A),

            0x40 => self.bit(hw, 0, B),
            0x41 => self.bit(hw, 0, C),
            0x42 => self.bit(hw, 0, D),
            0x43 => self.bit(hw, 0, E),
            0x44 => self.bit(hw, 0, H),
            0x45 => self.bit(hw, 0, L),
            0x46 => self.bit(hw, 0, Addr::HL),
            0x47 => self.bit(hw, 0, A),
            0x48 => self.bit(hw, 1, B),
            0x49 => self.bit(hw, 1, C),
            0x4a => self.bit(hw, 1, D),
            0x4b => self.bit(hw, 1, E),
            0x4c => self.bit(hw, 1, H),
            0x4d => self.bit(hw, 1, L),
            0x4e => self.bit(hw, 1, Addr::HL),
            0x4f => self.bit(hw, 1, A),

            0x50 => self.bit(hw, 2, B),
            0x51 => self.bit(hw, 2, C),
            0x52 => self.bit(hw, 2, D),
            0x53 => self.bit(hw, 2, E),
            0x54 => self.bit(hw, 2, H),
            0x55 => self.bit(hw, 2, L),
            0x56 => self.bit(hw, 2, Addr::HL),
            0x57 => self.bit(hw, 2, A),
            0x58 => self.bit(hw, 3, B),
            0x59 => self.bit(hw, 3, C),
            0x5a => self.bit(hw, 3, D),
            0x5b => self.bit(hw, 3, E),
            0x5c => self.bit(hw, 3, H),
            0x5d => self.bit(hw, 3, L),
            0x5e => self.bit(hw, 3, Addr::HL),
            0x5f => self.bit(hw, 3, A),

            0x60 => self.bit(hw, 4, B),
            0x61 => self.bit(hw, 4, C),
            0x62 => self.bit(hw, 4, D),
            0x63 => self.bit(hw, 4, E),
            0x64 => self.bit(hw, 4, H),
            0x65 => self.bit(hw, 4, L),
            0x66 => self.bit(hw, 4, Addr::HL),
            0x67 => self.bit(hw, 4, A),
            0x68 => self.bit(hw, 5, B),
            0x69 => self.bit(hw, 5, C),
            0x6a => self.bit(hw, 5, D),
            0x6b => self.bit(hw, 5, E),
            0x6c => self.bit(hw, 5, H),
            0x6d => self.bit(hw, 5, L),
            0x6e => self.bit(hw, 5, Addr::HL),
            0x6f => self.bit(hw, 5, A),

            0x70 => self.bit(hw, 6, B),
            0x71 => self.bit(hw, 6, C),
            0x72 => self.bit(hw, 6, D),
            0x73 => self.bit(hw, 6, E),
            0x74 => self.bit(hw, 6, H),
            0x75 => self.bit(hw, 6, L),
            0x76 => self.bit(hw, 6, Addr::HL),
            0x77 => self.bit(hw, 6, A),
            0x78 => self.bit(hw, 7, B),
            0x79 => self.bit(hw, 7, C),
            0x7a => self.bit(hw, 7, D),
            0x7b => self.bit(hw, 7, E),
            0x7c => self.bit(hw, 7, H),
            0x7d => self.bit(hw, 7, L),
            0x7e => self.bit(hw, 7, Addr::HL),
            0x7f => self.bit(hw, 7, A),

            0x80 => self.res(hw, 0, B),
            0x81 => self.res(hw, 0, C),
            0x82 => self.res(hw, 0, D),
            0x83 => self.res(hw, 0, E),
            0x84 => self.res(hw, 0, H),
            0x85 => self.res(hw, 0, L),
            0x86 => self.res(hw, 0, Addr::HL),
            0x87 => self.res(hw, 0, A),
            0x88 => self.res(hw, 1, B),
            0x89 => self.res(hw, 1, C),
            0x8a => self.res(hw, 1, D),
            0x8b => self.res(hw, 1, E),
            0x8c => self.res(hw, 1, H),
            0x8d => self.res(hw, 1, L),
            0x8e => self.res(hw, 1, Addr::HL),
            0x8f => self.res(hw, 1, A),

            0x90 => self.res(hw, 2, B),
            0x91 => self.res(hw, 2, C),
            0x92 => self.res(hw, 2, D),
            0x93 => self.res(hw, 2, E),
            0x94 => self.res(hw, 2, H),
            0x95 => self.res(hw, 2, L),
            0x96 => self.res(hw, 2, Addr::HL),
            0x97 => self.res(hw, 2, A),
            0x98 => self.res(hw, 3, B),
            0x99 => self.res(hw, 3, C),
            0x9a => self.res(hw, 3, D),
            0x9b => self.res(hw, 3, E),
            0x9c => self.res(hw, 3, H),
            0x9d => self.res(hw, 3, L),
            0x9e => self.res(hw, 3, Addr::HL),
            0x9f => self.res(hw, 3, A),

            0xa0 => self.res(hw, 4, B),
            0xa1 => self.res(hw, 4, C),
            0xa2 => self.res(hw, 4, D),
            0xa3 => self.res(hw, 4, E),
            0xa4 => self.res(hw, 4, H),
            0xa5 => self.res(hw, 4, L),
            0xa6 => self.res(hw, 4, Addr::HL),
            0xa7 => self.res(hw, 4, A),
            0xa8 => self.res(hw, 5, B),
            0xa9 => self.res(hw, 5, C),
            0xaa => self.res(hw, 5, D),
            0xab => self.res(hw, 5, E),
            0xac => self.res(hw, 5, H),
            0xad => self.res(hw, 5, L),
            0xae => self.res(hw, 5, Addr::HL),
            0xaf => self.res(hw, 5, A),

            0xb0 => self.res(hw, 6, B),
            0xb1 => self.res(hw, 6, C),
            0xb2 => self.res(hw, 6, D),
            0xb3 => self.res(hw, 6, E),
            0xb4 => self.res(hw, 6, H),
            0xb5 => self.res(hw, 6, L),
            0xb6 => self.res(hw, 6, Addr::HL),
            0xb7 => self.res(hw, 6, A),
            0xb8 => self.res(hw, 7, B),
            0xb9 => self.res(hw, 7, C),
            0xba => self.res(hw, 7, D),
            0xbb => self.res(hw, 7, E),
            0xbc => self.res(hw, 7, H),
            0xbd => self.res(hw, 7, L),
            0xbe => self.res(hw, 7, Addr::HL),
            0xbf => self.res(hw, 7, A),

            0xc0 => self.set(hw, 0, B),
            0xc1 => self.set(hw, 0, C),
            0xc2 => self.set(hw, 0, D),
            0xc3 => self.set(hw, 0, E),
            0xc4 => self.set(hw, 0, H),
            0xc5 => self.set(hw, 0, L),
            0xc6 => self.set(hw, 0, Addr::HL),
            0xc7 => self.set(hw, 0, A),
            0xc8 => self.set(hw, 1, B),
            0xc9 => self.set(hw, 1, C),
            0xca => self.set(hw, 1, D),
            0xcb => self.set(hw, 1, E),
            0xcc => self.set(hw, 1, H),
            0xcd => self.set(hw, 1, L),
            0xce => self.set(hw, 1, Addr::HL),
            0xcf => self.set(hw, 1, A),

            0xd0 => self.set(hw, 2, B),
            0xd1 => self.set(hw, 2, C),
            0xd2 => self.set(hw, 2, D),
            0xd3 => self.set(hw, 2, E),
            0xd4 => self.set(hw, 2, H),
            0xd5 => self.set(hw, 2, L),
            0xd6 => self.set(hw, 2, Addr::HL),
            0xd7 => self.set(hw, 2, A),
            0xd8 => self.set(hw, 3, B),
            0xd9 => self.set(hw, 3, C),
            0xda => self.set(hw, 3, D),
            0xdb => self.set(hw, 3, E),
            0xdc => self.set(hw, 3, H),
            0xdd => self.set(hw, 3, L),
            0xde => self.set(hw, 3, Addr::HL),
            0xdf => self.set(hw, 3, A),

            0xe0 => self.set(hw, 4, B),
            0xe1 => self.set(hw, 4, C),
            0xe2 => self.set(hw, 4, D),
            0xe3 => self.set(hw, 4, E),
            0xe4 => self.set(hw, 4, H),
            0xe5 => self.set(hw, 4, L),
            0xe6 => self.set(hw, 4, Addr::HL),
            0xe7 => self.set(hw, 4, A),
            0xe8 => self.set(hw, 5, B),
            0xe9 => self.set(hw, 5, C),
            0xea => self.set(hw, 5, D),
            0xeb => self.set(hw, 5, E),
            0xec => self.set(hw, 5, H),
            0xed => self.set(hw, 5, L),
            0xee => self.set(hw, 5, Addr::HL),
            0xef => self.set(hw, 5, A),

            0xf0 => self.set(hw, 6, B),
            0xf1 => self.set(hw, 6, C),
            0xf2 => self.set(hw, 6, D),
            0xf3 => self.set(hw, 6, E),
            0xf4 => self.set(hw, 6, H),
            0xf5 => self.set(hw, 6, L),
            0xf6 => self.set(hw, 6, Addr::HL),
            0xf7 => self.set(hw, 6, A),
            0xf8 => self.set(hw, 7, B),
            0xf9 => self.set(hw, 7, C),
            0xfa => self.set(hw, 7, D),
            0xfb => self.set(hw, 7, E),
            0xfc => self.set(hw, 7, H),
            0xfd => self.set(hw, 7, L),
            0xfe => self.set(hw, 7, Addr::HL),
            0xff => self.set(hw, 7, A),
        }
    }

    fn invalid_opcode(&mut self, op_code: u8) -> String {
        format!("INVALID {}", op_code.to_hex())
    }
}
